@page "/"

@using ConflictResolver.Models
@using ConflictResolver.Services.Repositories
@using ConflictResolver.Utils.Extensions
@using System.Text.Json
@using Majorsoft.Blazor.Components.Common.JsInterop.Clipboard

@inject IClipboardHandler ClipboardHandler
@inject ISnackbar Snackbar

<MudGrid Class="my-4" Spacing="8">
    <MudItem xs="12">
        <MudPaper Class="rounded-lg">
            <MudGrid>
                <MudItem xs="12">
                    <MudStack Row="true">
                        <MudText Typo="Typo.h6" Class="my-auto mx-4">Schedule Conflict Finder</MudText>
                    </MudStack>
                </MudItem>
                <MudItem xs="12" Class="flex flex-col">
                    <MudSelect bind-SelectedValues="@_selectedBlocks" Class="mx-4" Margin="Margin.Dense" SelectedValuesChanged="@OnBlocksChanged" MultiSelection="true" T="string" Placeholder="Select Blocks..." Variant="Variant.Outlined">
                        @if (_blocks != null)
                        {
                            foreach (var block in _blocks)
                            {
                                <MudSelectItem T="string" Value="block"/>
                            }
                        }
                    </MudSelect>
                </MudItem>
                @if (_enrolled != null && _enrolled.Any())
                {
                    <MudItem xs="12" Class="flex flex-col">
                        <MudSelect SelectedValuesChanged="@OnSelectedCoursesChanged" Class="mx-4" Margin="Margin.Dense" MultiSelection="true" T="string" Placeholder="Select Courses..." Variant="Variant.Outlined">
                            @foreach (var course in _enrolled)
                            {
                                <MudSelectItem T="string" Value="course"/>
                            }
                        </MudSelect>
                    </MudItem>
                }
                <MudItem xs="12" Class="flex flex-col">
                    @if (_courses == null)
                    {
                        <MudText Class="mx-auto">No available schedule</MudText>
                    }
                    else
                    {
                        <MudDataGrid Hover="true" Items="@_courses" Elevation="0">
                            <Columns>
                                <PropertyColumn Property="x => x.Block"/>
                                <PropertyColumn Property="x => x.Course"/>
                                <PropertyColumn Property="x => x.CourseTitle" Title="Course Title"/>
                                <PropertyColumn Property="x => x.ClassType" Title="Type">
                                    <CellTemplate>
                                        <MudChip Variant="Variant.Filled" Color="@(context.Item.ClassType.Equals("LEC") ? Color.Default : Color.Primary)">
                                            @context.Item.ClassType
                                        </MudChip>
                                    </CellTemplate>
                                </PropertyColumn>
                                <PropertyColumn Sortable="false" Property="x => x.Days">
                                    <CellTemplate>
                                        <MudStack Row="true" Spacing="0">
                                            <MudChipSet ReadOnly="true">
                                                @foreach (var day in context.Item.Days)
                                                {
                                                    <MudChip Variant="Variant.Filled" Color="Color.Primary">
                                                        @day.ToDayOfWeek()
                                                    </MudChip>
                                                }
                                            </MudChipSet>
                                        </MudStack>
                                    </CellTemplate>
                                </PropertyColumn>
                                <PropertyColumn Property="x => x.Start" Title="Time">
                                    <CellTemplate>
                                        <MudText>@($"{context.Item.Start} - {context.Item.End}")</MudText>
                                    </CellTemplate>
                                </PropertyColumn>
                                <PropertyColumn Sortable="false" Property="x => x" Title="Conflicts">
                                    <CellTemplate>
                                        @if (context.Item.CourseConflicts != null)
                                        {
                                            <MudChipSet ReadOnly="true">
                                                @foreach (var course in context.Item.CourseConflicts)
                                                {
                                                    <MudChip Variant="Variant.Filled" Color="Color.Error">
                                                        @course
                                                    </MudChip>
                                                }
                                            </MudChipSet>
                                        }
                                        else
                                        {
                                            <MudChip Variant="Variant.Filled" Color="Color.Default">
                                                None
                                            </MudChip>
                                        }
                                    </CellTemplate>
                                </PropertyColumn>
                            </Columns>
                        </MudDataGrid>
                    }
                </MudItem>
                @if (_courses != null && _courses.Any(course => course.Conflicts))
                {
                    <MudItem xs="12" Class="flex flex-col">
                        <MudButton OnClick="@OnResolveConflictingSchedules" StartIcon="@Icons.Material.Filled.Refresh" Class="mx-4 mb-4" DisableElevation="true" Variant="Variant.Filled" Color="Color.Primary">
                            Find Alternative Schedules For Conflicts
                        </MudButton>
                    </MudItem>
                }
            </MudGrid>
        </MudPaper>
    </MudItem>
    @if (_recommendedSchedules.Any())
    {
        <MudItem xs="12">
            <MudPaper Class="rounded-lg">
                <MudGrid>
                    <MudItem xs="12">
                        <MudText Typo="Typo.h6" Class="my-auto mx-4">Alternative Schedules</MudText>
                    </MudItem>
                    <MudItem xs="12" Class="flex flex-col">
                        <MudDataGrid Hover="true" Items="@_recommendedSchedules" Elevation="0" GroupExpanded="true">
                            <Columns>
                                <PropertyColumn Property="x => x.Block"/>
                                <PropertyColumn Property="x => x.Course" Groupable="true" Grouping="true"/>
                                <PropertyColumn Property="x => x.CourseTitle" Title="Course Title"/>
                                <PropertyColumn Property="x => x.ClassType" Title="Type">
                                    <CellTemplate>
                                        <MudChip Variant="Variant.Filled" Color="@(context.Item.ClassType.Equals("LEC") ? Color.Default : Color.Primary)">
                                            @context.Item.ClassType
                                        </MudChip>
                                    </CellTemplate>
                                </PropertyColumn>
                                <PropertyColumn Sortable="false" Property="x => x.Days">
                                    <CellTemplate>
                                        <MudStack Row="true" Spacing="0">
                                            @foreach (var day in context.Item.Days)
                                            {
                                                <MudChip Variant="Variant.Filled" Color="Color.Primary">
                                                    @day.ToDayOfWeek()
                                                </MudChip>
                                            }
                                        </MudStack>
                                    </CellTemplate>
                                </PropertyColumn>
                                <PropertyColumn Property="x => x.Start" Title="Time">
                                    <CellTemplate>
                                        <MudText>@($"{context.Item.Start} - {context.Item.End}")</MudText>
                                    </CellTemplate>
                                </PropertyColumn>
                                <PropertyColumn Sortable="false" Property="x => x" Title="Conflicts">
                                    <CellTemplate>
                                        @if (context.Item.CourseConflicts != null)
                                        {
                                            <MudChipSet ReadOnly="true">
                                                @foreach (var course in context.Item.CourseConflicts)
                                                {
                                                    <MudChip Variant="Variant.Filled" Color="Color.Error">
                                                        @course
                                                    </MudChip>
                                                }
                                            </MudChipSet>
                                        }
                                        else
                                        {
                                            <MudChip Variant="Variant.Filled" Color="Color.Default">
                                                None
                                            </MudChip>
                                        }
                                    </CellTemplate>
                                </PropertyColumn>
                            </Columns>
                        </MudDataGrid>
                    </MudItem>
                    <MudItem xs="12" Class="flex flex-col">
                        <MudButton Disabled="@_isGeneratingShareLink" OnClick="@OnShareSchedule" StartIcon="@Icons.Material.Rounded.Link" Class="mx-4 mb-4" DisableElevation="true" Variant="Variant.Filled" Color="Color.Primary">
                            Copy Share Link
                        </MudButton>
                    </MudItem>
                </MudGrid>
            </MudPaper>
        </MudItem>
    }
</MudGrid>

@inject ScheduleRepository ScheduleRepository
@inject NavigationManager NavigationManager

@code {

    private IEnumerable<string>? _blocks;
    private IEnumerable<string>? _enrolled;
    private List<CourseSchedule>? _courses;
    private IEnumerable<string>? _selectedBlocks;
    private IEnumerable<string>? _selectedCourses;
    private List<CourseSchedule> _recommendedSchedules = new();

    private bool _isGeneratingShareLink = false;
    
    protected override async Task OnInitializedAsync()
    {
        var courses = await ScheduleRepository.GetSchedulesAsync();
        _blocks = courses.Select(course => course.Block)
            .Distinct()
            .OrderBy(block => block);
    }

    private async Task OnBlocksChanged(IEnumerable<string> blocks)
    {
        _selectedBlocks = blocks;

        var courses = await ScheduleRepository.GetSchedulesAsync(blocks: blocks);

        _enrolled = courses.Where(course => blocks.Any(enrolledBlock => course.Block.Equals(enrolledBlock)))
            .Select(course => course.CourseTitle)
            .OrderBy(course => course)
            .Distinct();

        if (_selectedCourses != null)
        {
            _courses = await ScheduleRepository.GetSchedulesAsync(blocks: _selectedBlocks, courses: _selectedCourses, conflicts: true);
        }
    }

    private async Task OnSelectedCoursesChanged(IEnumerable<string> selectedCourses)
    {
        _selectedCourses = selectedCourses;
        _courses = await ScheduleRepository.GetSchedulesAsync(blocks: _selectedBlocks, courses: selectedCourses, conflicts: true);
    }

    private async Task OnResolveConflictingSchedules()
    {
        _recommendedSchedules.Clear();
        var conflictingSchedules = _courses.Where(course => course.Conflicts);
        foreach (var conflictingSchedule in conflictingSchedules)
        {
            var alternativeSchedules = await ScheduleRepository.GetSchedulesAsync(
                courses: new[]
                {
                    conflictingSchedule.CourseTitle
                });

            var recommendedAlternatives = alternativeSchedules.Where(
                alternativeSchedule => !_courses.Any(course => course.Days
                                                                   .Any(scheduleDay =>
                                                                       alternativeSchedule
                                                                           .Days
                                                                           .Any(referenceDay =>
                                                                               referenceDay == scheduleDay))
                                                               && alternativeSchedule.Start >= course.Start
                                                               && alternativeSchedule.Start < course.End));

            _recommendedSchedules.AddRange(recommendedAlternatives);
        }

        _recommendedSchedules = _recommendedSchedules.Where(
                alternativeSchedule => !_recommendedSchedules.Any(course => course.Days
                                                                                .Any(scheduleDay =>
                                                                                    alternativeSchedule
                                                                                        .Days
                                                                                        .Any(referenceDay =>
                                                                                            referenceDay == scheduleDay))
                                                                            && alternativeSchedule.Start >= course.Start
                                                                            && alternativeSchedule.Start < course.End
                                                                            && !alternativeSchedule.Course.Equals(course.Course)))
            .Distinct()
            .OrderBy(schedule => schedule.CourseTitle)
            .ThenBy(schedule => schedule.Days.Min())
            .ThenBy(schedule => schedule.Start)
            .ToList();
    }

    private async Task OnShareSchedule()
    {
        _isGeneratingShareLink = true;
        var schedules = _courses.Select(course => course.Course);
        var recommendedSchedules = _recommendedSchedules.Select(course => course.Course);
        var recommendedBlocks = _recommendedSchedules.Select(course => course.Block);
        var sharingUrl = $"{NavigationManager.BaseUri}resolve?blocks={_selectedBlocks.SerializeAndEscape()}&recommendedBlocks={recommendedBlocks.SerializeAndEscape()}&courses={schedules.SerializeAndEscape()}&alternatives={recommendedSchedules.SerializeAndEscape()}";
        
        await ClipboardHandler.CopyTextToClipboardAsync(sharingUrl);
        await Task.Delay(500);
        
        Snackbar.Add("Sharing link has been copied to clipboard", Severity.Success);
        _isGeneratingShareLink = false;
    }

}